	  final @{helper.getNonGenericType(ifaceFQCN)} delegate;\n\n
	  public @{constructor}(@{helper.getNonGenericType(ifaceFQCN)} delegate) {\n
	@if{concrete && concreteSuperType != null}
	    super(delegate);\n
	@end{}
	    this.delegate = delegate;\n
	  }\n\n

	  public Object getDelegate() {\n
	    return delegate;\n
	  }\n\n

	@if{type.raw.readStream}
		@code{streamType=type.raw.readStreamArg}
  private io.reactivex.Observable<@{streamType.simpleName}> observable;\n\n
  private io.reactivex.Flowable<@{streamType.simpleName}> flowable;\n\n

  public synchronized io.reactivex.Observable<@{streamType.simpleName}> toObservable() {\n
    if (observable == null) {\n
		@if{streamType.kind == CLASS_API}
      java.util.function.Function<@{streamType.raw.name}, @{streamType.simpleName}> conv = @{streamType.raw.simpleName}::newInstance;\n
      // io.vertx.lang.rxjava.ReadStreamAdapter<@{streamType.raw.name}, @{streamType.simpleName}> adapter = new io.vertx.lang.rxjava.ReadStreamAdapter<>(this, conv);\n
      observable = /* io.reactivex.Observable.create(adapter) */ null;\n
		@else{}
      observable = io.vertx.reactivex.RxHelper.toObservable((io.vertx.core.streams.ReadStream<@{streamType.name}>) this.getDelegate());\n
		@end{}
    }\n
    return observable;\n
  }\n\n

  public synchronized io.reactivex.Flowable<@{streamType.simpleName}> toFlowable() {\n
    if (flowable == null) {\n
		@if{streamType.kind == CLASS_API}
      java.util.function.Function<@{streamType.raw.name}, @{streamType.simpleName}> conv = @{streamType.raw.simpleName}::newInstance;\n
      flowable = io.vertx.reactivex.RxHelper.toFlowable((io.vertx.core.streams.ReadStream<@{streamType.raw.name}>) this.getDelegate(), conv, io.vertx.core.Vertx.currentContext());\n
		@else{}
      flowable = io.vertx.reactivex.RxHelper.toFlowable((io.vertx.core.streams.ReadStream<@{streamType.name}>) this.getDelegate(), java.util.function.Function.identity(), io.vertx.core.Vertx.currentContext());\n
		@end{}
    }\n
    return flowable;\n
  }\n\n
	@end{}

	@foreach{method:methods}
		@includeNamed{'genMethod'}
	@end{}

	@foreach{cacheDecl:cacheDecls}
	  @{cacheDecl};\n
	@end{}
