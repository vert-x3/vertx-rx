/*\n
 * Copyright 2014 Red Hat, Inc.\n
 *\n
 * Red Hat licenses this file to you under the Apache License, version 2.0\n
 * (the "License"); you may not use this file except in compliance with the\n
 * License.  You may obtain a copy of the License at:\n
 *\n
 * http://www.apache.org/licenses/LICENSE-2.0\n
 *\n
 * Unless required by applicable law or agreed to in writing, software\n
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n
 * License for the specific language governing permissions and limitations\n
 * under the License.\n
 */\n\n

package @{ifacePackageName.replace("io.vertx.", targetPkg + ".")};\n

@comment{'the current index of the cache'}
@code{cacheDecls=new java.util.ArrayList()}


@declare{'invokeDelegate'}
@if{method.staticMethod}@{helper.getNonGenericType(ifaceFQCN)}@else{}@includeNamed{'rewriteDelegate';method=method}@end{}.@{method.name}(@foreach{param: method.params}@includeNamed{'paramArgument';param=param}@end{', '})
@end{}

@declare{'rewriteDelegate'}
@if{method.ownerTypes.size() > 1}
( /* Work around for https://jira.codehaus.org/browse/GROOVY-6970 */ (@{method.ownerTypes.iterator().next().name}) delegate)
@else{}
this.delegate
@end{}
@end{}

@declare{'paramTemplate'}
	@{param.type.simpleName} @{param.name}
@end{}

@declare{'resultHandlerTemplate'}
	new Handler<AsyncResult<@{eventJavaType}>>() {\n
	      public void handle(AsyncResult<@{eventJavaType}> event) {\n
	        AsyncResult<@{eventGroovyType}> f;\n
	        if (event.succeeded()) {\n
	          f = InternalHelper.<@{eventGroovyType}>result(@{callbackObject});\n
	        } else {\n
	          f = InternalHelper.<@{eventGroovyType}>failure(event.cause());\n
	        }\n
	        @{callbackName}.handle(f);\n
	      }\n
	    }
@end{}

@declare{'paramArgument'}
	@if{param.type.kind == CLASS_API}
		(@{param.type.name}) @{param.name}.getDelegate()
	@else{param.type.kind == CLASS_HANDLER}
		@code{eventType=param.type.args[0]}
		@code{eventKind=eventType.kind}
		@if{eventKind == CLASS_OTHER || eventKind.basic || eventKind == CLASS_VOID || eventKind == CLASS_OBJECT || eventKind.json || eventKind == CLASS_THROWABLE || eventKind == CLASS_OPTIONS}
			@{param.name}
		@else{eventKind == CLASS_LIST || eventKind == CLASS_SET}
			@code{elementType=eventType.args[0]}
			@code{elementKind=elementType.kind}
			@if{elementKind.basic}
				@{param.name}
			@else{elementKind == CLASS_API}
				@code{collectionName=eventType.raw.simpleName}
				@code{toGroovyElement= elementType.simpleName + '::newInstance'}
				@code{elementJavaType=elementType.name}
				new Handler<@{collectionName}<@{elementJavaType}>>() {\n
				      public void handle(@{collectionName}<@{elementJavaType}> event) {\n
				        @{param.name}.handle(event.stream().map(@{toGroovyElement}).collect(java.util.stream.Collectors.to@{collectionName}()));\n
				      }\n
				    }
			@else{}
				@{param.name}
			@end{}
		@else{eventKind == CLASS_API}
			new Handler<@{eventType.name}>() {\n
			      public void handle(@{eventType.name} event) {\n
			        @{param.name}.handle(new @{eventType.simpleName}(event));\n
			      }\n
			    }
		@else{eventKind == CLASS_ASYNC_RESULT}
			@code{resultType=eventType.args[0]}
			@code{resultKind=resultType.kind}
			@if{resultKind == CLASS_OTHER || resultKind.basic || resultKind == CLASS_VOID || resultKind == CLASS_OBJECT || resultKind.json || resultKind == CLASS_OPTIONS}
				@{param.name}
			@else{resultKind == CLASS_LIST || resultKind == CLASS_SET}
				@code{elementType=resultType.args[0]}
				@code{elementKind=elementType.kind}
				@if{elementKind.basic}
					@{param.name}
				@else{elementKind == CLASS_API}
					@code{collectionName=resultType.raw.simpleName}
					@code{toGroovyElement=elementType.simpleName + '::newInstance'}
					@code{elementJavaType=elementType.name}
					@code{elementGroovyType=elementType.simpleName}
					@code{eventJavaType=collectionName + '<' + elementJavaType + '>'}
					@code{eventGroovyType=collectionName + '<' + elementGroovyType + '>'}
					@code{callbackObject='event.result().stream().map(' + toGroovyElement + ').collect(java.util.stream.Collectors.to' + collectionName + '())'}
					@includeNamed{'resultHandlerTemplate';eventJavaType=eventJavaType;eventGroovyType=eventGroovyType;callbackObject=callbackObject;callbackName=param.name}
				@else{}
					@{param.name}
				@end{}
			@else{resultKind == CLASS_API}
				@includeNamed{'resultHandlerTemplate';eventJavaType=resultType.name;eventGroovyType=resultType.simpleName;callbackObject='new ' + resultType.simpleName + '(event.result())';callbackName=param.name}
			@else{}
				null /* Handler<AsyncResult<@{resultType.name}>> with kind @{resultKind} not yet implemented */
			@end{}
		@else{}
			null /* Handler<@{eventType.name}> with kind @{eventKind} not yet implemented */
		@end{}
	@else{param.type.kind == CLASS_LIST || param.type.kind == CLASS_SET}
		@code{elementType=param.type.args[0]}
		@code{elementKind=elementType.kind}
		@if{elementKind.basic || elementKind.json}
			@{param.name}
		@else{}
			@if{param.type.kind == CLASS_LIST}
				@code{collectionName='List'}
			@else{}
				@code{collectionName='Set'}
			@end{}
			@{param.name}.stream().map(element -> (@{elementType.name})element.getDelegate()).collect(java.util.stream.Collectors.to@{collectionName}())
		@end{}
	@else{param.type.kind == CLASS_MAP}
		@code{elementType=param.type.args[1]}
		@code{elementKind=elementType.kind}
		@if{elementKind.basic || elementKind.json}
			@{param.name}
		@else{}
			@{param.name}.entrySet().stream().collect(java.util.stream.Collectors.toMap(entry -> entry.getKey(), entry -> (@{elementType.name})entry.getValue().getDelegate()))
		@end{}
	@else{}
		@{param.name}
	@end{}
@end{}

@declare{'returnTypeTemplate'}
	@{type.simpleName}
@end{}

@declare{'startMethodTemplate'}
public @if{method.staticMethod}static @end{}@if{method.typeParams.size() > 0}<@foreach{typeParam:method.typeParams}@{typeParam.name}@end{', '}> @end{}@includeNamed{'returnTypeTemplate';type=method.returnType} @{method.name}(@foreach{param: method.params}@includeNamed{'paramTemplate';param=param}@end{', '}) {
@end{}

import java.util.Map;\n
import io.vertx.lang.rxjava.InternalHelper;\n
import rx.Observable;\n
@comment{"Generate the imports"}
@foreach{importedType:importedTypes}
	@if{importedType.kind == CLASS_API}
		@if{!ifacePackageName.equals(importedType.packageName)}
			import @{importedType.toString().replace("io.vertx.", targetPkg + ".")};\n
		@end{}
	@else{}
		@if{!importedType.packageName.equals("java.lang")}
			import @{importedType};\n
		@end{}
	@end{}
@end{}

@if{ifaceComment != null}
/**\n
 *@{ifaceComment.replaceAll('\n(?!$)', '\n *')}
 */\n
@end{}
public @if{concrete}class@else{}interface@end{} @{helper.getSimpleName(ifaceFQCN)}

@if{concrete}
	@if{concreteSuperTypes.size() > 0}
	 extends
		@foreach{concreteSuperType: concreteSuperTypes}
		 @{concreteSuperType.simpleName}
		@end{}
	@end{}
@end{}

@if{abstractSuperTypes.size() > 0}
	 @if{concrete}implements@else{}extends@end{}
	@foreach{abstractSuperType: abstractSuperTypes}
	 @{abstractSuperType.simpleName}
	@end{', '}
@end{} {\n

@if{concrete}

	@includeNamed{'/vertx-java/template/classbody.templ';constructor=ifaceSimpleName}

@else{}

	  Object getDelegate();\n

	@foreach{method:methods}
	  @if{method.staticMethod}static @end{}@if{method.typeParams.size() > 0}<@foreach{typeVar:method.typeParams}@{typeVar}@end{}> @end{}@{method.returnType.simpleName} @{method.name}(@foreach{param: method.params}@includeNamed{'paramTemplate';param=param}@end{', '});\n
	@end{}

	@if{type.raw.name == 'io.vertx.core.streams.ReadStream'}
  rx.Observable<@{typeParams[0].name}> toObservable();\n
	@end{}

@end{}

  public static @if{typeParams.size() > 0}<@foreach{typeParam:typeParams}@{typeParam.name}@end{', '}> @end{}@{type.simpleName} newInstance(@{type.raw.name} arg) {\n
    return new @{type.raw.simpleName + (concrete ? '' : 'Impl')}@if{typeParams.size() > 0}<@foreach{typeParam:typeParams}@{typeParam.name}@end{', '}> @end{}(arg);\n
  }\n
}\n

@if{!concrete}

\n
class @{type.raw.simpleName}Impl@if{typeParams.size() > 0}<@foreach{typeParam:typeParams}@{typeParam.name}@end{','}>@end{} implements @{helper.getSimpleName(ifaceFQCN)} {\n
@includeNamed{'/vertx-java/template/classbody.templ';constructor=(type.raw.simpleName + 'Impl')}
}\n

@end{}